/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Presentacion;

import AD.ADCategoria;
import AD.ADTabladetalle;
import Entidades.Categoria;
import Entidades.Tabladetalle;
import static Presentacion.zmenu.internal;
import java.awt.AWTEvent;
import java.awt.ActiveEvent;
import java.awt.Component;
import java.awt.MenuComponent;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import recursos.dashstyle;
import recursos.dashtyped;
import static Presentacion.FIProducto.txproducto_categoria;
import static Presentacion.FIProducto.txproducto_umedida;
import static Presentacion.FIProducto.txproducto_estado;
import static Presentacion.FIProducto.txproducto_fleje;
import static Presentacion.FIProducto.producto_idtabla;
import static Presentacion.FIProducto.producto_titulo;

/**
 *
 * @author KFLORES
 */
public class FIDProductoTD extends javax.swing.JInternalFrame{

    /**
     * Creates new form FIDTabladetalle
     * @throws java.lang.ClassNotFoundException
     * @throws java.sql.SQLException
     */
    
    public FIDProductoTD() throws ClassNotFoundException, SQLException {
        initComponents();
        cargardatos();
        txbusqueda.requestFocus();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tabladetalle = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        txbusqueda = new javax.swing.JTextField();
        cbcolumna = new javax.swing.JComboBox<>();
        btnaplicar = new javax.swing.JButton();
        btncancelar = new javax.swing.JButton();

        setClosable(true);
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/icono.png"))); // NOI18N

        tabladetalle = new javax.swing.JTable(){
            public boolean isCellEditable(int rowIndex, int colIndex){
                return false;
            }
        };
        tabladetalle.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tabladetalle.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tabladetalle.getTableHeader().setResizingAllowed(false);
        tabladetalle.getTableHeader().setReorderingAllowed(false);
        tabladetalle.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabladetalleMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabladetalle);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Filtro"));

        txbusqueda.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txbusquedaKeyTyped(evt);
            }
        });

        cbcolumna.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Descripción", "Código" }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cbcolumna, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txbusqueda)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txbusqueda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbcolumna, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnaplicar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/check.png"))); // NOI18N
        btnaplicar.setText("Aplicar");
        btnaplicar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnaplicarActionPerformed(evt);
            }
        });

        btncancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/no-check.png"))); // NOI18N
        btncancelar.setText("Cancelar");
        btncancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btncancelarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 384, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnaplicar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(57, 57, 57)
                .addComponent(btncancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(61, 61, 61))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnaplicar, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btncancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 11, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btncancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btncancelarActionPerformed
this.dispose();
    }//GEN-LAST:event_btncancelarActionPerformed

    private void btnaplicarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnaplicarActionPerformed
        if (tabladetalle.getSelectedRow()==-1) {
        JOptionPane.showInternalMessageDialog(internal, "Selecciona una fila","Validar datos",JOptionPane.INFORMATION_MESSAGE);    
        }else{
        String valor = tabladetalle.getValueAt(tabladetalle.getSelectedRow(), 0).toString();
        this.dispose();
        if (producto_idtabla==0) {
        txproducto_categoria.setText(valor);
        }if (producto_idtabla==100) {
        txproducto_umedida.setText(valor);
        }if (producto_idtabla==104) {
        txproducto_estado.setText(valor);
        }if (producto_idtabla==103) {
        txproducto_fleje.setText(valor);
        }
        }
        
//abrir ventana y cargar la fila donde esta ubicada el elemento.
//cargar elemento seleccionado directo en el cuadro invocador.
    }//GEN-LAST:event_btnaplicarActionPerformed

    private void tabladetalleMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabladetalleMouseClicked
       if(evt.getClickCount()==2){
       String valor = tabladetalle.getValueAt(tabladetalle.getSelectedRow(), 0).toString();
        this.dispose();
           if (producto_idtabla==0) {
        txproducto_categoria.setText(valor);
        }if (producto_idtabla==100) {
        txproducto_umedida.setText(valor);
        }if (producto_idtabla==104) {
        txproducto_estado.setText(valor);
        }if (producto_idtabla==103) {
        txproducto_fleje.setText(valor);
        }
       }
    }//GEN-LAST:event_tabladetalleMouseClicked

    private void txbusquedaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txbusquedaKeyTyped
        new dashtyped().control_maxdigitos(evt, txproducto_estado, 50); 
        txbusqueda.addKeyListener(new KeyAdapter() {
            @Override
            public void keyReleased(final KeyEvent e) {
                String cadena = (txbusqueda.getText());
                txbusqueda.setText(cadena.toUpperCase());
                repaint();
                filtro();
            }
        });
        s = new TableRowSorter(tabladetalle.getModel());
        tabladetalle.setRowSorter(s);

    }//GEN-LAST:event_txbusquedaKeyTyped

// indica si aquest es modal o no.
    boolean modal = false;

    @Override
    public void show() {
        super.show();
        if (this.modal) {
            startModal();
        }
    }

    @Override
    public void setVisible(boolean value) {
        super.setVisible(value);
        if (modal) {
            if (value) {
                startModal();
            } else {
                stopModal();
            }
        }
    }

    private synchronized void startModal() {

        try {
            if (SwingUtilities.isEventDispatchThread()) {
                java.awt.EventQueue theQueue = getToolkit().getSystemEventQueue();
                while (isVisible()) {
                    AWTEvent event = theQueue.getNextEvent();
                    Object source = event.getSource();
                    boolean dispatch = true;

                    if (event instanceof MouseEvent) {
                        MouseEvent e = (MouseEvent) event;
                        MouseEvent m =
                                SwingUtilities.convertMouseEvent((Component) e.getSource(), e, this);
                        if (!this.contains(m.getPoint()) && e.getID() != MouseEvent.MOUSE_DRAGGED) {
                            dispatch = false;
                        }
                    }

                    if (dispatch) {
                        if (event instanceof ActiveEvent) {
                            ((ActiveEvent) event).dispatch();
                        } else if (source instanceof Component) {
                            ((Component) source).dispatchEvent(
                                    event);
                        } else if (source instanceof MenuComponent) {
                            ((MenuComponent) source).dispatchEvent(
                                    event);
                        } else {
                            System.err.println(
                                    "Unable to dispatch: " + event);
                        }
                    }
                }
            } else {
                while (isVisible()) {
                    wait();
                }
            }
        } catch (InterruptedException ignored) {
        }

    }

    private synchronized void stopModal() {
        notifyAll();
    }

    public void setModal(boolean modal) {
        this.modal = modal;
    }

    public boolean isModal() {
        return this.modal;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnaplicar;
    private javax.swing.JButton btncancelar;
    private javax.swing.JComboBox<String> cbcolumna;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tabladetalle;
    private javax.swing.JTextField txbusqueda;
    // End of variables declaration//GEN-END:variables
    
    TableRowSorter s;
    DefaultTableModel modelo;
    
    private void cargardatos() throws ClassNotFoundException, SQLException {
    setTitle(producto_titulo);
    String[] columnas = {"Código","Tabla","Descripción","Fleje"};    
    modelo = new DefaultTableModel(null,columnas); 
    s = new TableRowSorter(modelo);
    
    tabladetalle.setModel(modelo);
    tabladetalle.setRowSorter(s);
    
    tabladetalle.removeColumn(tabladetalle.getColumnModel().getColumn(3));
    tabladetalle.removeColumn(tabladetalle.getColumnModel().getColumn(1));
    
    //tabladetalle.getColumnModel().getColumn(0).setPreferredWidth(25);
    tabladetalle.getColumnModel().getColumn(1).setPreferredWidth(200);
    TableRowSorter<DefaultTableModel> sorteo = new TableRowSorter<> (modelo);
    tabladetalle.setRowSorter(sorteo);
    
        if (producto_idtabla!=0) {
    for (Tabladetalle c : ADTabladetalle.Listar()) {
    if (c.getIDTABLA()==producto_idtabla) {
    modelo.addRow(c.DatosArray());
    }
    }  
        }else{
    for (Categoria c : ADCategoria.Listapersonalizada()) {
    modelo.addRow(c.DatosArray());
    }         
        }
    }
    
    int columnaABuscar = 0;
        //Filtro de combo para busqueda
        public void filtro() {
            
        if ("Descripción".equals(cbcolumna.getSelectedItem().toString())) {
            columnaABuscar = 2;
        }
        if ("Código".equals(cbcolumna.getSelectedItem().toString())) {
            columnaABuscar = 0;
        }
        s.setRowFilter(RowFilter.regexFilter(txbusqueda.getText(), columnaABuscar));
    }
}
